from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor

import fsm
from credentials import TELEGRAM_API_TOKEN
from db_handler import DBHandler
from keyboard_helper import Keyboard
from stats import Statistics

bot = Bot(TELEGRAM_API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
fsm.register_handlers_films(dp)


@dp.message_handler(commands="start")
async def send_welcome(message: types.Message):
    keyboard = Keyboard(["–ü–æ–∏—Å–∫", "–ü–æ–º–æ—â—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"]).keyboard
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø - cinemabot, –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º üçø\n"
        "–ñ–º–∏ '–ü–æ–∏—Å–∫'!",
        reply_markup=keyboard,
    )


@dp.message_handler(commands="help")
@dp.message_handler(Text(equals="–ü–æ–º–æ—â—å", ignore_case=True))
async def help(message: types.Message):
    keyboard = Keyboard(["–ü–æ–∏—Å–∫", "–ü–æ–º–æ—â—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"]).keyboard
    await message.reply(
        "–ù–∞–ø–∏—à–∏ '–ü–æ–∏—Å–∫' –∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ —Ñ–∏–ª—å–º!\n"
        "–ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞, —Ç–æ –∂–º–∏ '–ò—Å—Ç–æ—Ä–∏—è'\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, "
        "—Ç–æ –∂–º–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, —Ç–æ –∂–º–∏ '–ü–æ–º–æ—â—å'",
        reply_markup=keyboard,
    )


# todo fix output
@dp.message_handler(commands="stats")
@dp.message_handler(Text(equals="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", ignore_case=True))
async def stats(message: types.Message):
    keyboard = Keyboard(["–ü–æ–∏—Å–∫", "–ü–æ–º–æ—â—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"]).keyboard
    database = await DBHandler.create(
        "postgres", "cine123bot", "5.188.142.77", "5435", "postgres"
    )

    statistic = Statistics(database)
    res2 = await statistic.get_films_count_for_user(message.from_user.id)
    res2 = [(i[0], i[1]) for i in res2]
    stat = "\n".join([f"{i[0]}: {i[1]}" for i in res2])
    await message.answer(
        f"<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞</b> üé¶:\n{stat}",
        reply_markup=keyboard,
        parse_mode="HTML",
    )


@dp.message_handler(commands="history")
@dp.message_handler(Text(equals="–ò—Å—Ç–æ—Ä–∏—è", ignore_case=True))
async def history(message: types.Message):
    keyboard = Keyboard(["–ü–æ–∏—Å–∫", "–ü–æ–º–æ—â—å", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è"]).keyboard
    database = await DBHandler.create(
        "postgres", "cine123bot", "5.188.142.77", "5435", "postgres"
    )
    statistic = Statistics(database)
    res = await statistic.get_history_for_user(message.from_user.id)
    res = [i[0] for i in res]
    await message.answer(
        f"<b>–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞</b> ‚è≥: {', '.join(res)}",
        reply_markup=keyboard,
        parse_mode="HTML",
    )


if __name__ == "__main__":
    executor.start_polling(dp)
